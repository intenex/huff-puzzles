/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr // load function selector
    __FUNC_SIG(maxOfArray) eq maxOfArray jumpi

    0x00 0x00 revert

    maxOfArray:
        calldatasize 0x24 0x60 calldatacopy // loads all the arguments besides the function selector into memory, since just one dynamic array as an argument, the first 32 bytes should be a pointer to the next slot where the array data starts, then the next 32 bytes should be the length, then the rest are the actual numbers, so 0x24 should be the length as the first thing loaded and the rest are the actual memory bits. Offset at 0x60 to save 0x00-0x60 for storing the sum, the current memory pointer for the next number, and the current number of numbers left to fetch
        0x00 0x00 mstore // store the max number here
        0x80 0x20 mstore // store the current location in memory to load for the next number
        0x00 // push zero on the stack to do the gt comparison later
        0x60 mload // the size of all the numbers
        dup1 0x01 swap1 sub 0x40 mstore // duplicate the size, subtract 1 from it, then store it at 0x40
        gt compareNumber jumpi
        0x00 0x00 revert // if it's just an empty array revert as per instructions

    compareNumber:
        0x00 mload // load the current largest number
        dup1 // duplicate the current largest number so we have it later after we do the gt comparison
        0x20 mload // load the current location in memory to fetch
        dup1 0x20 add 0x20 mstore // duplicate the current memory pointer, then add 32 to it, then save that to the 0x20 memory pointer location for the next value if any
        mload // load the value at the current memory location
        dup1 swap2 // duplicate the new number we're testing and swap it with the duplicated current largest number so that's on the top of the stack
        lt swapNumber jumpi // if the current largest number is smaller than the biggest then 
        reduceSizeAndReturn jump

    swapNumber:
        0x00 mstore // stack is now newestNum, largestNum at this point, so just need to save the last item into memory to get it to work
        reduceSizeAndReturn jump

    reduceSizeAndReturn:
        0x00 0x40 mload // load the current size of numbers remaining in the array to test, and put a 0x00 before it to be the comparison to see if it's 0 or not
        dup1 0x01 swap1 sub 0x40 mstore // duplicate the size, subtract 1 from it, then store it at 0x40
        gt compareNumber jumpi // if the size of elements is still greater than 0 then repeat
        0x20 0x00 return // if the jumpi doesn't execute then return the sum as it is
}
